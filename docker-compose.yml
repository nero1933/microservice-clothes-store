services:
  user-service:
    container_name: user-service
    build: ./user-service
    ports:
      - "8000:8000"
    volumes:
      - ./user-service:/user-service
    depends_on:
      - user-db
      - test-db
    environment:
      - DB_NAME=${USER_DB_NAME}
      - DB_HOST=user-db
      - DB_TEST_HOST=test-db
      - DB_USER=${USER_DB_USER}
      - DB_PASSWORD=${USER_DB_PASSWORD}
      - JWT_TOKEN_SECRET_KEY=${JWT_TOKEN_SECRET_KEY}
      - JWT_TOKEN_ALGORITHM=${JWT_TOKEN_ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS}
    networks:
      - ecommerce-net

  user-db:
    container_name: user-db
    image: postgres:17.4-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./user-service/data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}'" ]
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - ecommerce-net

  test-db:
    container_name: test-db
    image: postgres:17.4-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}'" ]
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - ecommerce-net

networks:
  ecommerce-net:
    driver: bridge
