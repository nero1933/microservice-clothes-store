services:
  users-service:
    container_name: users-service
    build:
      context: .
      dockerfile: ./microservices/users/Dockerfile-app
    image: users-service:0.1
    command: ["python", "main.py"]
    ports:
      - "8001:8000"
    volumes:
      - ./microservices/users:/users
      - ./core:/users/core
    environment:
      - DB_NAME=${USERS_DB_NAME}
      - DB_SOCKET=users-db:5432
      - DB_TEST_SOCKET=test-db:5432
      - DB_USER=${USERS_DB_USER}
      - DB_PASSWORD=${USERS_DB_PASSWORD}
      - RABBITMQ_NAME=users-service
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_SOCKET=rabbitmq:5672
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users.rule=Host(`users.localhost`) && PathPrefix(`/api/v1/users`)"
      - "traefik.http.routers.users.entrypoints=web"
#      - "traefik.http.routers.users.middlewares=auth"
      - "traefik.http.services.users.loadbalancer.server.port=8000"
      - "traefik.http.routers.users.priority=10"

      - "traefik.http.routers.users_me.rule=Host(`users.localhost`) && Path(`/api/v1/users/me`)"
      - "traefik.http.routers.users_me.middlewares=auth"
      - "traefik.http.routers.users_me.entrypoints=web"
      - "traefik.http.routers.users_me.priority=100"

      - "traefik.http.middlewares.auth.forwardauth.address=http://auth-service:8000/api/v1/auth/authenticate"
      - "traefik.http.middlewares.auth.forwardauth.trustforwardheader=true"
      - "traefik.http.middlewares.auth.forwardauth.authResponseHeaders=X-User-Id"
#       - "traefik.http.middlewares.auth.forwardauth.method=POST"
    depends_on:
      users-db:
        condition: service_healthy
    networks:
      - ecommerce-net

  users-worker:
    container_name: users-worker
    build:
      context: .
      dockerfile: ./microservices/users/Dockerfile-worker
    image: users-worker:0.1
    command: ["python", "worker.py"]
    volumes:
      - ./microservices/users:/users
      - ./core:/users/core
    environment:
      - DB_NAME=${USERS_DB_NAME}
      - DB_SOCKET=users-db:5432
      - DB_TEST_SOCKET=test-db:5432
      - DB_USER=${USERS_DB_USER}
      - DB_PASSWORD=${USERS_DB_PASSWORD}
      - RABBITMQ_NAME=users-worker
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_SOCKET=rabbitmq:5672
    labels:
      - "traefik.routers.users-worker.rule=Path(`/docs`)"
    depends_on:
      users-db:
        condition: service_healthy
    networks:
      - ecommerce-net

  users-db:
    container_name: users-db
    image: postgres:17.4-alpine
    ports:
      - "5433:5432"
    volumes:
      - ./microservices/users/data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${USERS_DB_NAME}
      - POSTGRES_USER=${USERS_DB_USER}
      - POSTGRES_PASSWORD=${USERS_DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${USERS_DB_USER} -d ${USERS_DB_NAME}'" ]
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - ecommerce-net

networks:
  ecommerce-net:
    external: true
